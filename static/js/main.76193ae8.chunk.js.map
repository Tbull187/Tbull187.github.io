{"version":3,"sources":["components/SearchResults/SearchResults.js","components/SearchForm/SearchForm.js","components/SearchFormContainer/SearchFormContainer.js","utils/utils.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchResults","searchResults","loading","className","Spinner","animation","role","length","map","result","i","key","FirstName","LastName","Address","City","State","SearchForm","validateSearch","formErrors","useState","firstName","setFirstName","lastName","setLastName","geoState","setGeoState","Row","xs","lg","Col","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","value","onChange","e","target","disabled","state","md","Button","variant","onClick","SearchFormContainer","props","baseUrl","errors","Set","isEmpty","add","this","setState","has","size","_search","url","fetch","response","ok","json","then","data","get","console","log","bind","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.76193ae8.chunk.js","sourcesContent":["import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst SearchResults = ({ searchResults, loading }) => {\n  return (\n    <div className='search-results'>\n        {loading && \n          <div className=\"spinner-container\">\n            <Spinner animation=\"border\" role=\"status\" />\n          </div>\n        }\n\n        {!loading && searchResults && searchResults.length === 0 &&\n         <div className=\"no-results\">No Results Found.</div>\n        }\n\n        {searchResults && searchResults.map((result, i) => {\n          return (\n            <div className='result' key={i}>\n              <div className=\"bold\">Result #{i+1}</div>\n              <div>First Name: {result.FirstName}</div>\n              <div>Last Name: {result.LastName}</div>\n              <div>Address: {result.Address}</div>\n              <div>City: {result.City}</div>\n              <div>State: {result.State}</div>\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default SearchResults;","import React, { useState } from 'react';\nimport { Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\nimport SearchResults from '../SearchResults/SearchResults';\n\nconst SearchForm = ({ searchResults, validateSearch, formErrors, loading }) => {\n  const [ firstName, setFirstName] = useState('');\n  const [ lastName, setLastName] = useState('');\n  const [ geoState, setGeoState] = useState('');\n\n  return (\n    <>\n    <Row className=\"btn-row\" xs={1} lg={4}>\n      <Col>\n        <InputGroup className={formErrors.firstName ? \"input-error\" : \"\"}>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"fist-name-label\">First Name</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            placeholder=\"First Name\"\n            aria-label=\"First Name\"\n            aria-describedby=\"fist-name-label\"\n            value={firstName}\n            onChange={e => setFirstName(e.target.value)}\n            disabled={loading}\n          />          \n        </InputGroup>\n        {formErrors.firstName && <div className=\"error-msg\">First name must exist</div>}\n      </Col>\n      <Col>\n        <InputGroup className={formErrors.lastName ? \"input-error\" : \"\"}>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"last-name-label\">Last Name</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            placeholder=\"Last Name\"\n            aria-label=\"Last Name\"\n            aria-describedby=\"last-name-label\"\n            value={lastName}\n            onChange={e => setLastName(e.target.value)}\n            disabled={loading}\n          />          \n        </InputGroup>\n        {formErrors.lastName && <div className=\"error-msg\">Last name must exist</div>}\n      </Col>\n      <Col>\n        <InputGroup className={formErrors.state ? \"input-error\" : \"\"}>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"state-label\">State</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            placeholder=\"State\"\n            aria-label=\"State\"\n            aria-describedby=\"state-label\"\n            value={geoState}\n            onChange={e => setGeoState(e.target.value)}\n            disabled={loading}\n          />\n        </InputGroup>\n        {formErrors.state && <div className=\"error-msg\">Geographic state must exist</div>}\n      </Col>\n      <Col md=\"auto\">\n        <Button \n          variant=\"primary\"\n          onClick={() => validateSearch(firstName, lastName, geoState)}\n          disabled={loading}\n        >\n          Search\n        </Button>\n      </Col>\n    </Row>\n    <SearchResults searchResults={searchResults} loading={loading}/>\n    </>\n  )\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport SearchForm from '../SearchForm/SearchForm';\nimport { get, isEmpty } from 'lodash';\nimport { proxyUrl } from '../../utils/utils';\n\nexport default class SearchFormContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.baseUrl = 'https://api.datafinder.com/qdf.php?service=phone&k2=9abbxna7d2b65ivia3p9vljs&cfg_maxrecs=100';\n\n    this.state = {\n      searchResults: null,\n      loading: false,\n      formErrors: {\n        firstName: false,\n        lastName: false,\n        state: false\n      }\n     }\n  }\n\n/* Another approach to validation could be to wire-up the validation function call\n    to the onChange handlers of the various input fields. This approach would provide \n    validation in \"real-time\" as the user typed. */\n  validateSearch(firstName, lastName, state) {\n    const errors = new Set();\n\n    if (isEmpty(firstName)) {\n      errors.add('firstName');\n    }\n    if (isEmpty(lastName)) {\n      errors.add('lastName');\n    }\n    if (isEmpty(state)) {\n      errors.add('state');\n    }\n\n    this.setState({\n      formErrors: {\n        firstName: errors.has('firstName'),\n        lastName: errors.has('lastName'),\n        state: errors.has('state')\n      }\n    })\n\n    if (errors.size === 0) {\n      this._search(firstName, lastName, state);\n    }\n\n  }\n\n  async _search(firstName, lastName, state) {\n    const url = `${this.baseUrl}&d_first=${firstName}&d_last=${lastName}&d_state=${state}`;\n\n    this.setState({ loading: true, searchResults: null });\n    try {\n      const response = await fetch(proxyUrl + url);\n      if (response.ok) {\n        response.json().then(data => {\n          const searchResults = get(data, 'datafinder.results', []);\n          this.setState({ searchResults, loading: false });\n        });\n      }\n    }\n    catch(e) {\n      console.log(e);\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    return (\n      <SearchForm \n        validateSearch={this.validateSearch.bind(this)}\n        searchResults={this.state.searchResults}\n        loading={this.state.loading}\n        formErrors={this.state.formErrors}\n      />\n    )\n  }\n}","// Proxy url for making CORS resquests in development\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport SearchFormContainer from '../SearchFormContainer/SearchFormContainer';\nimport '../../styles/App.css'\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Row className=\"text-align-center\">\n          <Col><h1>Welcome to Versium People Search</h1></Col>\n        </Row>\n        <SearchFormContainer />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}